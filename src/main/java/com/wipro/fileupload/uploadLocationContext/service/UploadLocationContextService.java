package com.wipro.fileupload.uploadLocationContext.service;

import com.wipro.fileupload.uploadLocationContext.dao.UploadLocationContextRepository;
import com.wipro.fileupload.entities.UploadLocationContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityNotFoundException;

@Service
public class UploadLocationContextService implements IUploadLocationContextService{

    @Autowired
    UploadLocationContextRepository uploadLocationContextRepository;

    @Override
    public UploadLocationContext getUploadLocationContextById(Long id) throws EntityNotFoundException{
        UploadLocationContext uploadLocationContext = uploadLocationContextRepository.findById(id).get();
        if(uploadLocationContext == null) throw new EntityNotFoundException("UploadLocationContext record not found for the given id " + id);
        return uploadLocationContext;
    }

    @Override
    public UploadLocationContext updateUploadLocationContext(Long id, UploadLocationContext uploadLocationContext) throws EntityNotFoundException{
        UploadLocationContext uploadLocationContextEntity = uploadLocationContextRepository.findById(id).get();
        if(uploadLocationContextEntity == null) throw new EntityNotFoundException("UploadLocationContext record not found for the given id " + uploadLocationContext.getUploadLocationContextId());
        uploadLocationContextEntity.setContextClientId(uploadLocationContext.getContextClientId());
        uploadLocationContextEntity.setDestinationType(uploadLocationContext.getDestinationType());
        uploadLocationContextEntity.setAccessKey(uploadLocationContext.getAccessKey());
        uploadLocationContextEntity.setAccessSecretKey(uploadLocationContext.getAccessSecretKey());
        uploadLocationContextEntity.setBucketName(uploadLocationContext.getBucketName());
        uploadLocationContextEntity.setClientRegion(uploadLocationContext.getClientRegion());
        uploadLocationContextEntity.setUpdatedBy(uploadLocationContext.getUpdatedBy());
        uploadLocationContextEntity.setUpdatedOn(new java.util.Date());
        uploadLocationContextEntity = uploadLocationContextRepository.save(uploadLocationContextEntity);
        return uploadLocationContextEntity;
    }

    @Override
    public UploadLocationContext addUploadLocationContext(UploadLocationContext uploadLocationContext) throws IllegalAccessException{
        if(uploadLocationContext.getUploadLocationContextId() != null)
            throw new IllegalAccessException("You cannot add a uploadLocationContext with the id, this field is autogenerated!");
        uploadLocationContext.setCreatedOn(new java.util.Date());
        return uploadLocationContextRepository.save(uploadLocationContext);
    }

    @Override
    public void deleteUploadLocationContextById(long uploadLocationContextId) throws EntityNotFoundException{
        uploadLocationContextRepository.deleteById(uploadLocationContextId);
    }

}
