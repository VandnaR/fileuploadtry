package com.wipro.fileupload.context.service;

import com.wipro.fileupload.context.dao.ContextRepository;
import com.wipro.fileupload.entities.Context;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityNotFoundException;

@Service
public class ContextService implements IContextService{

    @Autowired
    ContextRepository contextRepository;

    @Override
    public Context getContextById(Long id) throws EntityNotFoundException{
        Context context = contextRepository.findById(id).get();
        if(context == null) throw new EntityNotFoundException("Context record not found for the given id " + id);
        return context;
    }

    @Override
    public Context updateContext(Long id, Context context) throws EntityNotFoundException{
        Context contextEntity = contextRepository.findById(id).get();
        if(contextEntity == null) throw new EntityNotFoundException("Context record not found for the given id " + context.getContextClientId());
        contextEntity.setClientAppName(context.getClientAppName());
        contextEntity.setClientAppId(context.getClientAppId());
        contextEntity.setClientAppSecret(context.getClientAppSecret());
        contextEntity.setEnvironment(context.getEnvironment());
        contextEntity.setUpdatedBy(context.getUpdatedBy());
        contextEntity.setUpdatedOn(new java.util.Date());
        contextEntity = contextRepository.save(contextEntity);
        return contextEntity;
    }

    @Override
    public Context addContext(Context context) throws IllegalAccessException{
        if(context.getContextClientId() != null)
            throw new IllegalAccessException("You cannot add a context with the id, this field is autogenerated!");
        context.setCreatedOn(new java.util.Date());
        return contextRepository.save(context);
    }

    @Override
    public void deleteContextById(long contextId) throws EntityNotFoundException{
        contextRepository.deleteById(contextId);
    }

    @Override
    public Context getContextByClientAppIdAndClientAppSecret(String clientAppId, String clientAppSecret) {
        return contextRepository.findByClientAppIdAndClientAppSecret(clientAppId,clientAppSecret);
    }

}
